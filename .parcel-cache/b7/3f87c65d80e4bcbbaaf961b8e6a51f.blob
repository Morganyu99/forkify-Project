"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _View = _interopRequireDefault(require("./View"));

var _icons = _interopRequireDefault(require("url:../../img/icons.svg"));

var _config = require("../config");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class PaginationView extends _View.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "_parentElement", document.querySelector(".pagination"));
  }

  addHandlerClick(handler) {
    this._parentElement.addEventListener("click", function (e) {
      if (e.target.closest(".pagination__btn--next")) {
        handler(true);
      }

      if (e.target.closest(".pagination__btn--prev")) {
        handler(false);
      }
    });
  }

  changeButton(result) {
    this._data.page += result;
  }

  _buttonRender(page, result) {
    return result > 0 ? `
          <button class="btn--inline pagination__btn--next">
            <span>Page ${page + result}</span>
            <svg class="search__icon">
              <use href="${_icons.default}#icon-arrow-right"></use>
            </svg>
          </button>` : `<button class="btn--inline pagination__btn--prev">
          <svg class="search__icon">
            <use href="${_icons.default}#icon-arrow-left"></use>
          </svg>
          <span>Page ${page + result}</span>
        </button>`;
  }

  _generateMarkup() {
    const numPages = Math.ceil(this._data.results.length / this._data.resultsPerPage); //Page 1 and there are other pages

    if (this._data.page === 1 && numPages > 1) {
      return this._buttonRender(this._data.page, _config.NEXT_PAGE);
    } //Last Page


    if (this._data.page === numPages && numPages > 1) {
      return this._buttonRender(this._data.page, _config.PREV_PAGE);
    }

    if (this._data.page > 1 && this._data.page < numPages) {
      //Other page
      return this._buttonRender(this._data.page, _config.PREV_PAGE) + this._buttonRender(this._data.page, _config.NEXT_PAGE);
    } //Page 1 and there are no pages


    return ``;
  }

}

var _default = new PaginationView();

exports.default = _default;