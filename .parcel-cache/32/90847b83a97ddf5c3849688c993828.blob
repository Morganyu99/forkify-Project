"use strict";

require("core-js/modules/es.string.replace");

require("core-js/modules/es.typed-array.float32-array");

require("core-js/modules/es.typed-array.float64-array");

require("core-js/modules/es.typed-array.int8-array");

require("core-js/modules/es.typed-array.int16-array");

require("core-js/modules/es.typed-array.int32-array");

require("core-js/modules/es.typed-array.uint8-array");

require("core-js/modules/es.typed-array.uint8-clamped-array");

require("core-js/modules/es.typed-array.uint16-array");

require("core-js/modules/es.typed-array.uint32-array");

require("core-js/modules/es.typed-array.from");

require("core-js/modules/es.typed-array.of");

require("core-js/modules/web.immediate");

require("core-js/modules/web.url");

require("core-js/modules/web.url.to-json");

require("core-js/modules/web.url-search-params");

var model = _interopRequireWildcard(require("./model.js"));

var _recipeView = _interopRequireDefault(require("./views/recipeView.js"));

var _resultsView = _interopRequireDefault(require("./views/resultsView.js"));

var _searchView = _interopRequireDefault(require("./views/searchView.js"));

var _paginationView = _interopRequireDefault(require("./views/paginationView.js"));

var _bookmarksView = _interopRequireDefault(require("./views/bookmarksView.js"));

var _addRecipeView = _interopRequireDefault(require("./views/addRecipeView.js"));

var _config = require("./config.js");

var _regeneratorRuntime = require("regenerator-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// https://forkify-api.herokuap p.com/v2
///////////////////////////////////////
//API 7fa69d8c-2cf2-47d8-bdc4-25f54211b3b2
const controlRecipes = async function () {
  try {
    const id = window.location.hash.slice(1);
    if (!id) return;

    _recipeView.default.renderSpinner();

    _resultsView.default.update(model.getSearchResultsPage(model.state.search.page));

    await model.loadRecipe(id);
    const recipe = model.state.recipe;

    _recipeView.default.render(recipe);

    _bookmarksView.default.update(model.state.bookmark);

    _recipeView.default.addHandlerUpdateServings(controlServings);
  } catch (err) {
    _recipeView.default.renderError();
  }
};

const controlSearchRecipes = async function () {
  try {
    const query = _searchView.default.getQuery();

    if (!query) return;
    model.resetPageResults();

    _resultsView.default.renderSpinner();

    await model.loadSearchResult(query);

    _resultsView.default.render(model.getSearchResultsPage(model.state.search.page));

    _paginationView.default.render(model.state.search);

    _paginationView.default.addHandlerClick(controlPagination);
  } catch (err) {
    _resultsView.default.renderError();
  }
};

const controlAddBookmark = function () {
  model.state.recipe.bookmarked ? model.deleteBookmark(model.state.recipe.id) : model.addBookmark(model.state.recipe);

  _recipeView.default.update(model.state.recipe);

  _bookmarksView.default.render(model.state.bookmark);
};

const controlPagination = function (result = true) {
  result ? _paginationView.default.changeButton(+1) : _paginationView.default.changeButton(-1);

  _resultsView.default.render(model.getSearchResultsPage(model.state.search.page));

  _paginationView.default.render(model.state.search);
};

const controlServings = function (servings) {
  model.updateServings(servings);

  _recipeView.default.update(model.state.recipe);
};

const controlAddRecipe = async function (newRecipe) {
  try {
    _addRecipeView.default.renderSpinner();

    await model.uploadRecipe(newRecipe);

    _recipeView.default.render(model.state.recipe); //Success Message


    _addRecipeView.default.renderMessage(); //Chnage id in URL


    window.history.pushState(null, "", `#${model.state.recipe.id}`); //Update

    _recipeView.default.render(model.state.recipe); //Close form window


    setTimeout(function () {
      _addRecipeView.default._hiddenToggleWindow();
    }, _config.MODAL_CLOSE_SEC * 1000); //Refresh Form

    setTimeout(function () {
      _addRecipeView.default.replaceViewForm;
    }, (_config.MODAL_CLOSE_SEC + 1) * 1000); //render bookmark view

    _bookmarksView.default.render(model.state.bookmark);

    _bookmarksView.default.update(model.state.bookmark);
  } catch (err) {
    _addRecipeView.default.renderError(err.message);

    console.log(err);
  }
};

const init = function () {
  model.getBookmarks();

  _bookmarksView.default.render(model.state.bookmark);

  _recipeView.default.addHandlerRender(controlRecipes);

  _searchView.default.addHandlerSearch(controlSearchRecipes);

  _recipeView.default.addHandlerBookmark(controlAddBookmark);

  _addRecipeView.default._addHandlerUpload(controlAddRecipe);
};

init();